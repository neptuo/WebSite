<?xml version="1.0" encoding="utf-8" ?>
<Posts xmlns="http://schemas.neptuo.com/xsd/neptuo-website-blog.xsd">
  <Post>
    <Title>SharpKit extension/plugin called UnobtrusiveFeatures</Title>
    <Description>
      SharpKit, the C# to javascript compiler, is super, but there are some things that irritate me and one them is the export definition.
    </Description>
    <Url>sharpkit-unobtrusivefeatures</Url>
    <FilePath>~/App_Data/Blog/sharpkit-unobtrusivefeatures.md</FilePath>
    <ReleaseDate>2016-09-26</ReleaseDate>
    <Author>Maraf</Author>
    <GitHubCommentPath>neptuo/WebSite/issues/13</GitHubCommentPath>
  </Post>
  <Post>
    <Title>Technology behind this site</Title>
    <Description>
      Here is a technology overrview and workflow behind this website. This site is hosted at GitHub and pregenerated from ASP.NET MVC web application.
    </Description>
    <Url>website-introduction</Url>
    <FilePath>~/App_Data/Blog/website-introduction.md</FilePath>
    <ReleaseDate>2016-09-01</ReleaseDate>
    <Author>Maraf</Author>
    <GitHubCommentPath>neptuo/WebSite/issues/12</GitHubCommentPath>
  </Post>
  <Post>
    <Title>JavascriptSerializer in the RegisterStartupScript</Title>
    <Description>
      Startup script behavior in the ASP.NET WebForms inside UpdatePanel containing script tags.
    </Description>
    <Url>scriptmanager-and-registering-startup-script</Url>
    <FilePath>~/App_Data/Blog/scriptmanager-and-registering-startup-script.md</FilePath>
    <ReleaseDate>2016-10-04</ReleaseDate>
    <Author>Maraf</Author>
    <GitHubCommentPath>neptuo/WebSite/issues/20</GitHubCommentPath>
  </Post>
  <Post>
    <Title>Creating route links and passing-in values</Title>
    <Description>
      How hard creating links to blog posts can be and how we make it (from our point of view) easier.
    </Description>
    <Url>mvc-route-values</Url>
    <FilePath>~/App_Data/Blog/mvc-route-values.md</FilePath>
    <ReleaseDate>2016-10-24</ReleaseDate>
    <Author>Maraf</Author>
    <GitHubCommentPath>neptuo/WebSite/issues/25</GitHubCommentPath>
  </Post>
  <Post>
    <Title>Building processing pipeline with behaviors</Title>
    <Description>
      About interception for uniform interfaces like those used in the MediatR.
    </Description>
    <Url>building-processing-pipeline-with-behaviors</Url>
    <FilePath>~/App_Data/Blog/building-processing-pipeline-with-behaviors.md</FilePath>
    <ReleaseDate>2016-11-09</ReleaseDate>
    <Author>Maraf</Author>
    <GitHubCommentPath>neptuo/WebSite/issues/26</GitHubCommentPath>
  </Post>
  <Post>
    <Title>Why I hate hamburgers</Title>
    <Description>
      A bit of thoughts about omnipresent hamburger menus.
    </Description>
    <Url>why-i-hate-hamburgers</Url>
    <FilePath>~/App_Data/Blog/why-i-hate-hamburgers.md</FilePath>
    <ReleaseDate>2017-02-01</ReleaseDate>
    <Author>Maraf</Author>
    <GitHubCommentPath>neptuo/WebSite/issues/31</GitHubCommentPath>
  </Post>
  <Post>
    <Title>Productivity - Solution Runner</Title>
    <Description>
      A brief introduction of a first product of the Productivity pack. Easy-to-use and super-fast tool for starting Visual Studio solutions.
    </Description>
    <Url>productivity-solution-runner</Url>
    <FilePath>~/App_Data/Blog/productivity-solution-runner.md</FilePath>
    <ReleaseDate>2017-02-03</ReleaseDate>
    <Author>Maraf</Author>
    <GitHubCommentPath>neptuo/WebSite/issues/32</GitHubCommentPath>
  </Post>
  <Post>
    <Title>Naming stuff, mostly in C#/.NET</Title>
    <Description>
      A list of code rules we have built in time to save time and headaches.
    </Description>
    <Url>naming-things</Url>
    <FilePath>~/App_Data/Blog/naming-things.md</FilePath>
    <ReleaseDate>2017-12-29</ReleaseDate>
    <Author>Maraf</Author>
    <GitHubCommentPath>neptuo/WebSite/issues/36</GitHubCommentPath>
  </Post>
  <Post>
    <Title>Blazor and the booting screen</Title>
    <Description>
      A first tip in a possible Blazor serie is about configuring loading screen.
      A replacement of the default "Loading..." with something more eye catching.
    </Description>
    <Url>blazor-boot-screen</Url>
    <FilePath>~/App_Data/Blog/blazor-boot-screen.md</FilePath>
    <ReleaseDate>2018-04-26</ReleaseDate>
    <Author>Maraf</Author>
  </Post>
  <Post>
    <Title>Blazor and complex component parameters</Title>
    <Description>
      A second tip. So clear and obvious, but it took some time to me to realize.
    </Description>
    <Url>blazor-component-parameters</Url>
    <FilePath>~/App_Data/Blog/blazor-component-parameters.md</FilePath>
    <ReleaseDate>2018-06-03</ReleaseDate>
    <Author>Maraf</Author>
  </Post>
  <Post>
    <Title>Blazor and page parameters</Title>
    <Description>
      A third tip. About reusing current page instance when links targets to it (possibly with different parameters).
    </Description>
    <Url>blazor-page-parameters</Url>
    <FilePath>~/App_Data/Blog/blazor-page-parameters.md</FilePath>
    <ReleaseDate>2018-11-05</ReleaseDate>
    <Author>Maraf</Author>
  </Post>
  <Post>
    <Title>WPF and design-time data</Title>
    <Description>
      There are various to ways to accomplish this goal: Show some data in the designer for WPF view. Here I'm going to describe the one that works the best for me.
    </Description>
    <Url>wpf-design-data</Url>
    <FilePath>~/App_Data/Blog/wpf-design-data.md</FilePath>
    <ReleaseDate>2019-04-21</ReleaseDate>
    <Author>Maraf</Author>
  </Post>
  <Post>
    <Title>WPF - Preventing Alt+F4 from closing the window</Title>
    <Description>
      This one describes a rate case when you want to prevent execution of Alt+F4 but still want the window to remain closeable, by other ways.
    </Description>
    <Url>wpf-preventing-alt-f4</Url>
    <FilePath>~/App_Data/Blog/wpf-preventing-alt-f4.md</FilePath>
    <ReleaseDate>2019-05-12</ReleaseDate>
    <Author>Maraf</Author>
  </Post>
  <Post>
    <Title>Hosting VSIX feed as AppVeyor artifact</Title>
    <Description>
      We have a GitHub repository with Visual Studio extensions. We are using AppVeyor as CI tool. We produce VSIX artifacts on AppVeyor. We wanted a feed to easily install these artifacts.
    </Description>
    <Url>appveyor-vsix-feed</Url>
    <FilePath>~/App_Data/Blog/appveyor-vsix-feed.md</FilePath>
    <ReleaseDate>2019-06-25</ReleaseDate>
    <Author>Maraf</Author>
  </Post>
</Posts>